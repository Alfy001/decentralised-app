const express = require('express');
const Web3 = require('web3');
const { PinataClient } = require('@pinata/sdk');

// Setup Express
const app = express();
const port = 3000;

// Setup Web3
const web3 = new Web3('https://your.ethereum.node'); // Use an Ethereum node provider
const contractAddress = 'your_contract_address';
const contractABI = [...] // Your contract ABI

const pinata = PinataClient('your_pinata_api_key', 'your_pinata_secret_key');

// Instantiate the contract
const contract = new web3.eth.Contract(contractABI, contractAddress);

// Middleware to parse JSON bodies
app.use(express.json());

// Function to register a new patient
app.post('/registerPatient', async (req, res) => {
    const patientAddress = req.body.patientAddress; // Assuming the patient address is sent in the request body
    try {
        // Create a folder for the patient in Pinata
        const folderCID = await createPatientFolder(patientAddress); 

        // Register the patient in the smart contract
        const accounts = await web3.eth.getAccounts(); // Get the admin account
        await contract.methods.registerPatient(patientAddress, folderCID).send({ from: accounts[0] });

        res.status(200).json({ message: 'Patient registered successfully', folderCID });
    } catch (error) {
        console.error('Error registering patient:', error);
        res.status(500).json({ message: 'Error registering patient', error });
    }
});

// New endpoint to get patient CID by address for registered hospitals
app.get('/getPatientCID/:patientAddress', async (req, res) => {
    const patientAddress = req.params.patientAddress; // Get patient address from request parameters
    try {
        const accounts = await web3.eth.getAccounts(); // Get the hospital's account
        const cid = await contract.methods.getPatientCID(patientAddress).call({ from: accounts[0] });

        res.status(200).json({ patientAddress, folderCID: cid });
    } catch (error) {
        console.error('Error retrieving patient CID:', error);
        res.status(500).json({ message: 'Error retrieving patient CID', error });
    }
});

// Function to create a folder in Pinata
async function createPatientFolder(patientAddress) {
    // Generate a simple folder name based on the patient count (or some other criteria)
    const patientCount = await contract.methods.patientCount().call();
    const folderName = `patients/${patientCount}`; // Use the patient count as the folder name
    try {
        // Create a folder in Pinata
        const result = await pinata.pinJSONToIPFS({ name: 'patient_folder', address: patientAddress }, {
            pinataMetadata: {
                name: folderName
            }
        });
        return result.IpfsHash; // Return the CID of the created folder
    } catch (error) {
        console.error('Error creating folder in Pinata:', error);
        throw error; // Handle error accordingly
    }
});

// Start the Express server
app.listen(port, () => {
    console.log(`Backend listening at http://localhost:${port}`);
});

function to create a pinata and return the cid back


const express = require('express');
const Web3 = require('web3');

const app = express();
const port = 3000;

// Setup Web3
const web3 = new Web3('https://your.ethereum.node'); // Use your Ethereum node provider
const contractAddress = 'your_contract_address';
const contractABI = [...] // Your contract ABI

const contract = new web3.eth.Contract(contractABI, contractAddress);

// Mock database for storing decryption keys
const decryptionKeyDatabase = {
    // Example: patientAddress => decryptionKey
    // '0xPatientAddress1': 'decryptionKey1',
    // '0xPatientAddress2': 'decryptionKey2',
};

// Endpoint for hospitals to request decryption key
app.post('/requestDecryptionKey', async (req, res) => {
    const hospitalAddress = req.body.hospitalAddress; // Hospital address making the request
    const patientAddress = req.body.patientAddress; // Patient address for which key is requested

    try {
        // Verify if the hospital is registered
        const isRegistered = await contract.methods.registeredHospitals(hospitalAddress).call();
        if (!isRegistered) {
            return res.status(403).json({ message: 'Access Denied: Hospital is not registered' });
        }

        // Retrieve the decryption key from the secure database
        const decryptionKey = decryptionKeyDatabase[patientAddress]; // Replace with actual logic

        if (!decryptionKey) {
            return res.status(404).json({ message: 'Decryption key not found' });
        }

        res.status(200).json({ message: 'Decryption key retrieved successfully', decryptionKey });
    } catch (error) {
        console.error('Error retrieving decryption key:', error);
        res.status(500).json({ message: 'Error retrieving decryption key', error });
    }
});

// Start the Express server
app.listen(port, () => {
    console.log(`Backend listening at http://localhost:${port}`);
});


register hospital request for decryption key







// Endpoint to request decryption key
app.post('/requestDecryptionKey', async (req, res) => {
    const patientAddress = req.body.patientAddress; // Patient address sent in request
    const hospitalAddress = req.body.hospitalAddress; // Hospital requesting the key

    try {
        // Verify the hospital is registered
        const isRegistered = await contract.methods.registeredHospitals(hospitalAddress).call();
        if (!isRegistered) {
            return res.status(403).json({ message: 'Hospital not registered.' });
        }

        // Retrieve the decryption key from the database (not shown here)
        const decryptionKey = await getDecryptionKeyFromDatabase(patientAddress, hospitalAddress); 

        // Log the decryption key request in the smart contract
        await contract.methods.logDecryptionKeyRequest(patientAddress).send({ from: hospitalAddress });

        res.status(200).json({ decryptionKey });
    } catch (error) {
        console.error('Error requesting decryption key:', error);
        res.status(500).json({ message: 'Error requesting decryption key', error });
    }
});












// Function to get decryption key request logs for the admin
async function getDecryptionKeyLogs() {
    const events = await contract.getPastEvents('DecryptionKeyRequested', {
        fromBlock: 0,
        toBlock: 'latest'
    });

    // Format the logs for easier reading
    const logs = events.map(event => ({
        hospital: event.returnValues.hospital,
        patient: event.returnValues.patient,
        timestamp: new Date(event.returnValues.timestamp * 1000) // Convert to readable date
    }));

    return logs;
}

// Admin endpoint to view logs
app.get('/auditLogs', async (req, res) => {
    try {
        const logs = await getDecryptionKeyLogs();
        res.status(200).json(logs);
    } catch (error) {
        console.error('Error retrieving audit logs:', error);
        res.status(500).json({ message: 'Error retrieving audit logs', error });
    }
});





for logs




















































const express = require('express');
const Web3 = require('web3');
const bodyParser = require('body-parser');

// Setup Express
const app = express();
const port = 3000;
app.use(bodyParser.json()); // Middleware for JSON parsing

// Setup Web3
const web3 = new Web3('https://your.ethereum.node'); // Use an Ethereum node provider
const contractAddress = 'your_contract_address';
const contractABI = [...]; // Your contract ABI

// Instantiate the contract
const contract = new web3.eth.Contract(contractABI, contractAddress);

// Endpoint to register a new hospital
app.post('/registerHospital', async (req, res) => {
    const hospitalAddress = req.body.hospitalAddress; // Hospital address sent in request body
    try {
        const accounts = await web3.eth.getAccounts(); // Get the admin account
        await contract.methods.registerHospital(hospitalAddress).send({ from: accounts[0] });

        res.status(200).json({ message: 'Hospital registered successfully' });
    } catch (error) {
        console.error('Error registering hospital:', error);
        res.status(500).json({ message: 'Error registering hospital', error });
    }
});

// Endpoint to register a new patient
app.post('/registerPatient', async (req, res) => {
    const patientAddress = req.body.patientAddress; // Patient address
    const folderCID = req.body.folderCID; // Folder CID

    try {
        const accounts = await web3.eth.getAccounts(); // Get the admin account
        await contract.methods.registerPatient(patientAddress, folderCID).send({ from: accounts[0] });

        res.status(200).json({ message: 'Patient registered successfully' });
    } catch (error) {
        console.error('Error registering patient:', error);
        res.status(500).json({ message: 'Error registering patient', error });
    }
});

// Endpoint to request decryption key
app.post('/requestDecryptionKey', async (req, res) => {
    const patientAddress = req.body.patientAddress; // Patient address sent in request
    const hospitalAddress = req.body.hospitalAddress; // Hospital requesting the key

    try {
        // Verify the hospital is registered
        const isRegistered = await contract.methods.registeredHospitals(hospitalAddress).call();
        if (!isRegistered) {
            return res.status(403).json({ message: 'Hospital not registered.' });
        }

        // Retrieve the decryption key from the database (not shown here)
        const decryptionKey = await getDecryptionKeyFromDatabase(patientAddress, hospitalAddress); 

        // Log the decryption key request in the smart contract
        await contract.methods.logDecryptionKeyRequest(patientAddress).send({ from: hospitalAddress });

        res.status(200).json({ decryptionKey });
    } catch (error) {
        console.error('Error requesting decryption key:', error);
        res.status(500).json({ message: 'Error requesting decryption key', error });
    }
});

// Function to get decryption key request logs for the admin
async function getDecryptionKeyLogs() {
    const events = await contract.getPastEvents('DecryptionKeyRequested', {
        fromBlock: 0,
        toBlock: 'latest'
    });

    // Format the logs for easier reading
    const logs = events.map(event => ({
        hospital: event.returnValues.hospital,
        patient: event.returnValues.patient,
        timestamp: new Date(event.returnValues.timestamp * 1000) // Convert to readable date
    }));

    return logs;
}

// Admin endpoint to view logs
app.get('/auditLogs', async (req, res) => {
    try {
        const logs = await getDecryptionKeyLogs();
        res.status(200).json(logs);
    } catch (error) {
        console.error('Error retrieving audit logs:', error);
        res.status(500).json({ message: 'Error retrieving audit logs', error });
    }
});

// Start the Express server
app.listen(port, () => {
    console.log(`Backend listening at http://localhost:${port}`);
});




doubt for full code


















// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

contract HospitalRecords {
    address public admin;
    struct DecryptionRequestLog {
        address hospital;
        address patient;
        uint256 timestamp;
    }
    DecryptionRequestLog[] private decryptionRequestLogs;

    // Events
    event HospitalRegistered(address indexed hospital, string name, bool isRegistered);
    event PatientRegistered(address indexed patient, bool isRegistered, string folderCID);
    event DecryptionKeyRequested(address indexed hospital, address indexed patient, uint256 timestamp); // New event for auditing


    // Constructor
    constructor() {
        admin = msg.sender;
        admins[admin] = true; // Set contract deployer as admin
    }

    // Modifiers
    modifier onlyAdmin() {
        require(admins[msg.sender], "Access Denied: Only Admin");
        _;
    }

    modifier onlyRegisteredHospital() {
        require(registeredHospitals[msg.sender], "Access Denied: Only Registered Hospitals");
        _;
    }

    // Mappings
    mapping(address => bool) registeredPatients; // Track registered patients
    mapping(address => string) patientFolderCID; // Mapping for patient address to folder CID
    mapping(address => bool) registeredHospitals; // Registered hospitals
    mapping(address => string) hospitalNames; // Mapping for hospital names
    mapping(address => bool) admins; // Admins

    uint256 public patientCount; // Counter for patient IDs

    // Register a new hospital (only by admin)
    function registerHospital(address _hospital, string memory _name) public onlyAdmin {
        require(!registeredHospitals[_hospital], "Hospital is already registered");

        registeredHospitals[_hospital] = true;
        hospitalNames[_hospital] = _name; // Store the hospital name
        emit HospitalRegistered(_hospital, _name, true); // Emit event with name and registration status
    }

    // Admin registers a new patient
    function registerPatient(address _patient, string memory _folderCID) public onlyAdmin {
        require(!registeredPatients[_patient], "Patient is already registered");

        registeredPatients[_patient] = true; // Mark patient as registered
        patientFolderCID[_patient] = _folderCID; // Store folder CID

        patientCount++; // Increment patient count to track the number of registered patients

        emit PatientRegistered(_patient, true, _folderCID); // Emit event with CID
    }

    // Function to retrieve the CID for a registered patient by address
    function getPatientCID(address _patient) public view onlyRegisteredHospital returns (string memory) {
        require(registeredPatients[_patient], "Patient is not registered"); // Ensure patient exists
        return patientFolderCID[_patient]; // Return the folder CID
    }

    // Function to check if an address is a registered hospital
    function isRegisteredHospital(address _hospital) public view returns (bool) {
        return registeredHospitals[_hospital];
    }

    // Function to get the name of a registered hospital
    function getHospitalName(address _hospital) public view returns (string memory) {
        require(registeredHospitals[_hospital], "Hospital is not registered");
        return hospitalNames[_hospital]; // Return the hospital name
    }

     function logDecryptionKeyRequest(address _patient) public onlyRegisteredHospital {
        require(registeredPatients[_patient], "Patient is not registered");
        emit DecryptionKeyRequested(msg.sender, _patient, block.timestamp); // Emit event
    }

    // Function to get logs (can implement further to limit data returned based on need)
    function getDecryptionKeyLogs() public view onlyAdmin returns (DecryptionRequestLog[] memory) {
        return decryptionRequestLogs; // Return the entire log array
    }

}



smart contract


i have made made the logic for developing a folder to the patient after patient registration by pinata and it will mapped with patient address and registered hospital can acess the decryption and folder cid 

aes encryption for files not made 



